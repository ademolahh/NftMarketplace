{
  "address": "0xc0070801cd2e39e36dFf5e90E6B697dB916b1c63",
  "abi": [
    {
      "inputs": [],
      "name": "AboveMaximum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExpirationTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ListingExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughEther",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceCannotBeTheSame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouOwnThisItem",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdateListing",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLECTION_MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKETPLACE_MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MarketplaceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MarketplaceFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        }
      ],
      "name": "createListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "getCollectionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receipt",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.CollectionOwnerFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCollectionTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.ListingItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receipt",
          "type": "address"
        }
      ],
      "name": "setCollectionDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketplacefee",
          "type": "uint256"
        }
      ],
      "name": "setMarketplaceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setMarketplaceFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca7f6d28f6d9da8dca22286ddd6f980b51e4ce972f922f137bd8ae104bceadff",
  "receipt": {
    "to": null,
    "from": "0x64CD5E003cdfC3C35b1E2a5FaaAD005D207783CB",
    "contractAddress": "0xc0070801cd2e39e36dFf5e90E6B697dB916b1c63",
    "transactionIndex": 37,
    "gasUsed": "2007212",
    "logsBloom": "0x
    "blockHash": "0xda34d1f6b240ecce70f67ad5a60b4bdbbe6087f5d061c3048020c5549cd2bafe",
    "transactionHash": "0xca7f6d28f6d9da8dca22286ddd6f980b51e4ce972f922f137bd8ae104bceadff",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 7295295,
        "transactionHash": "0xca7f6d28f6d9da8dca22286ddd6f980b51e4ce972f922f137bd8ae104bceadff",
        "address": "0xc0070801cd2e39e36dFf5e90E6B697dB916b1c63",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000064cd5e003cdfc3c35b1e2a5faaad005d207783cb"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0xda34d1f6b240ecce70f67ad5a60b4bdbbe6087f5d061c3048020c5549cd2bafe"
      }
    ],
    "blockNumber": 7295295,
    "cumulativeGasUsed": "11077164",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8fbb9a775073a729bc1b477f1e6116f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AboveMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpirationTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceCannotBeTheSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouOwnThisItem\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdateListing\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLECTION_MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETPLACE_MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketplaceFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"getCollectionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.CollectionOwnerFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCollectionTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.ListingItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receipt\",\"type\":\"address\"}],\"name\":\"setCollectionDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketplacefee\",\"type\":\"uint256\"}],\"name\":\"setMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMarketplaceFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ItemListed(address,address,uint256,uint256)\":{\"notice\":\"================EVENTS================///\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NotOwner();\\r\\nerror NotListed();\\r\\nerror NotApproved();\\r\\nerror AboveMaximum();\\r\\nerror AlreadyListed();\\r\\nerror ListingExpired();\\r\\nerror YouOwnThisItem();\\r\\nerror TransferFailed();\\r\\nerror NotEnoughEther();\\r\\nerror LengthsNotEqual();\\r\\nerror PriceCannotBeZero();\\r\\nerror PriceCannotBeTheSame();\\r\\nerror InvalidExpirationTime();\\r\\n\\r\\ncontract NftMarketplace is ReentrancyGuard, Ownable {\\r\\n    uint256 public MarketplaceFee;\\r\\n    address public MarketplaceFeeCollector;\\r\\n\\r\\n    uint256 public constant MARKETPLACE_MAX_FEE = 5;\\r\\n    uint256 public constant COLLECTION_MAX_FEE = 12;\\r\\n\\r\\n    struct ListingItem {\\r\\n        uint256 price;\\r\\n        uint256 expirationTime;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    struct CollectionOwnerFee {\\r\\n        uint256 fee;\\r\\n        address receipt;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(uint256 => ListingItem)) private listing;\\r\\n    mapping(address => CollectionOwnerFee) private _collection;\\r\\n\\r\\n    modifier notListed(address nftAddress, uint256 tokenId) {\\r\\n        ListingItem memory _listing = listing[nftAddress][tokenId];\\r\\n        if (_listing.price > 0) revert AlreadyListed();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(address nftAddress, uint256 tokenId) {\\r\\n        ListingItem memory _listing = listing[nftAddress][tokenId];\\r\\n        if (_listing.price <= 0) revert NotListed();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _createListing(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _price,\\r\\n        uint256 _expirationTime\\r\\n    ) private {\\r\\n        if (_expirationTime <= block.timestamp) revert InvalidExpirationTime();\\r\\n        if (_price <= 0) revert PriceCannotBeZero();\\r\\n        IERC721 nft = IERC721(_nftAddress);\\r\\n        if (nft.ownerOf(_tokenId) != msg.sender) revert NotOwner();\\r\\n        if (!nft.isApprovedForAll(msg.sender, address(this)))\\r\\n            revert NotApproved();\\r\\n        listing[_nftAddress][_tokenId] = ListingItem({\\r\\n            price: _price,\\r\\n            expirationTime: _expirationTime,\\r\\n            seller: msg.sender\\r\\n        });\\r\\n     \\r\\n    }\\r\\n\\r\\n    function createListing(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _price,\\r\\n        uint256 _expirationTime\\r\\n    ) public notListed(_nftAddress, _tokenId) nonReentrant {\\r\\n        _createListing(_nftAddress, _tokenId, _price, _expirationTime);\\r\\n        emit ItemListed(msg.sender, _nftAddress, _tokenId, _price);\\r\\n    }\\r\\n\\r\\n    function updateListing(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 newPrice\\r\\n    ) external isListed(_nftAddress, _tokenId) nonReentrant {\\r\\n        if (listing[_nftAddress][_tokenId].price == newPrice)\\r\\n            revert PriceCannotBeTheSame();\\r\\n        listing[_nftAddress][_tokenId].price = newPrice;\\r\\n        emit UpdateListing(msg.sender, _nftAddress, _tokenId, newPrice);\\r\\n    }\\r\\n\\r\\n    function cancelListing(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        isListed(_nftAddress, _tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (IERC721(_nftAddress).ownerOf(_tokenId) != msg.sender)\\r\\n            revert NotOwner();\\r\\n        delete listing[_nftAddress][_tokenId];\\r\\n        emit ItemCanceled(msg.sender, _nftAddress, _tokenId);\\r\\n    }\\r\\n\\r\\n    function buyItem(address nftAddress, uint256 tokenId)\\r\\n        public\\r\\n        payable\\r\\n        nonReentrant\\r\\n        isListed(nftAddress, tokenId)\\r\\n    {\\r\\n        ListingItem memory _listing = listing[nftAddress][tokenId];\\r\\n        uint256 _price = _listing.price;\\r\\n        address _seller = _listing.seller;\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        if (_seller == msg.sender) revert YouOwnThisItem();\\r\\n        if (_listing.expirationTime < block.timestamp) revert ListingExpired();\\r\\n        if (msg.value < _price) revert NotEnoughEther();\\r\\n        delete listing[nftAddress][tokenId];\\r\\n        _makePayment(nftAddress, _seller, _price);\\r\\n        nft.safeTransferFrom(_listing.seller, msg.sender, tokenId);\\r\\n        emit ItemListed(_seller, nftAddress, tokenId, _price);\\r\\n       \\r\\n    }\\r\\n\\r\\n    function _makePayment(\\r\\n        address nftAddress,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        CollectionOwnerFee memory collection = _collection[nftAddress];\\r\\n        uint256 collectionFee;\\r\\n        uint256 _marketplaceFee;\\r\\n        if (collection.receipt != address(0)) {\\r\\n            collectionFee = collection.fee;\\r\\n            _marketplaceFee = MarketplaceFee;\\r\\n        } else {\\r\\n            collectionFee = 0;\\r\\n            _marketplaceFee = MarketplaceFee;\\r\\n        }\\r\\n\\r\\n        uint256 _collectionFee = (collectionFee * amount) / 100;\\r\\n        uint256 mFee = (_marketplaceFee * amount) / 100;\\r\\n        uint256 sellersEth = amount - _collectionFee - mFee;\\r\\n        _transferPayment(collection.receipt, _collectionFee);\\r\\n        _transferPayment(MarketplaceFeeCollector, mFee);\\r\\n        _transferPayment(to, sellersEth);\\r\\n    }\\r\\n\\r\\n    function _transferPayment(address to, uint256 amount) internal {\\r\\n        (bool success, ) = payable(to).call{value: amount}(\\\"\\\");\\r\\n        if (!success) revert TransferFailed();\\r\\n    }\\r\\n\\r\\n    function setCollectionDetails(\\r\\n        address nftAddress,\\r\\n        uint256 _fee,\\r\\n        address _receipt\\r\\n    ) external onlyOwner {\\r\\n        if (_fee > COLLECTION_MAX_FEE) revert AboveMaximum();\\r\\n        _collection[nftAddress] = CollectionOwnerFee({\\r\\n            fee: _fee,\\r\\n            receipt: _receipt\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setMarketplaceFee(uint256 _marketplacefee) external onlyOwner {\\r\\n        if (_marketplacefee > MARKETPLACE_MAX_FEE) revert AboveMaximum();\\r\\n        MarketplaceFee = _marketplacefee;\\r\\n    }\\r\\n\\r\\n    function setMarketplaceFeeCollector(address account) external onlyOwner {\\r\\n        MarketplaceFeeCollector = account;\\r\\n    }\\r\\n\\r\\n    function getCollectionInfo(address nftAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (CollectionOwnerFee memory)\\r\\n    {\\r\\n        return _collection[nftAddress];\\r\\n    }\\r\\n\\r\\n    function getCollectionTokenInfo(address nftAddress, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (ListingItem memory)\\r\\n    {\\r\\n        return listing[nftAddress][tokenId];\\r\\n    }\\r\\n\\r\\n    ///================EVENTS================///\\r\\n    event ItemListed(\\r\\n        address indexed seller,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event UpdateListing(\\r\\n        address indexed seller,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event ItemBought(\\r\\n        address indexed buyer,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n    event ItemCanceled(\\r\\n        address indexed seller,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xf24ca27bd6a1ef71766f8778ce9449fb04bb6e24bbad82342fb7cb83229ab73e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160008190555061003561002a61003a60201b60201c565b61004260201b60201c565b610108565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61229c80620001186000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063b2ddee0611610059578063b2ddee06146102f7578063dcd9e0a114610320578063f2fde38b14610349578063f772adf114610372576100f3565b80638da5cb5b1461024a5780639056a04b146102755780639407ea98146102b25780639f37092a146102db576100f3565b80636ee96052116100c65780636ee96052146101a457806370cdec3d146101cd578063715018a6146101f657806376b7251a1461020d576100f3565b80630923b0b5146100f85780630c1c244c146101235780632dea9e731461014e5780634061f2b814610179575b600080fd5b34801561010457600080fd5b5061010d61039b565b60405161011a9190611b41565b60405180910390f35b34801561012f57600080fd5b506101386103a1565b6040516101459190611b41565b60405180910390f35b34801561015a57600080fd5b506101636103a6565b6040516101709190611b9d565b60405180910390f35b34801561018557600080fd5b5061018e6103cc565b60405161019b9190611b41565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c69190611be9565b6103d1565b005b3480156101d957600080fd5b506101f460048036038101906101ef9190611c42565b61041d565b005b34801561020257600080fd5b5061020b6105f8565b005b34801561021957600080fd5b50610234600480360381019061022f9190611ca9565b61060c565b6040516102419190611d49565b60405180910390f35b34801561025657600080fd5b5061025f6106e1565b60405161026c9190611b9d565b60405180910390f35b34801561028157600080fd5b5061029c60048036038101906102979190611be9565b61070b565b6040516102a99190611d93565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190611dae565b6107c4565b005b6102f560048036038101906102f09190611ca9565b610811565b005b34801561030357600080fd5b5061031e60048036038101906103199190611ca9565b610ca7565b005b34801561032c57600080fd5b5061034760048036038101906103429190611ddb565b610fdf565b005b34801561035557600080fd5b50610370600480360381019061036b9190611be9565b6110e5565b005b34801561037e57600080fd5b5061039960048036038101906103949190611e2e565b611169565b005b60025481565b600581565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c81565b6103d961141b565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b83836000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115610527576040517fa3d582ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600054141561056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490611ede565b60405180910390fd5b600260008190555061058187878787611499565b858773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4886040516105df9190611b41565b60405180910390a4600160008190555050505050505050565b61060061141b565b61060a60006117a5565b565b610614611ac1565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610713611af8565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6107cc61141b565b6005811115610807576040517f973f732300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060028190555050565b60026000541415610857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084e90611ede565b60405180910390fd5b600260008190555081816000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610968576040517f665c1c5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151905060008260400151905060008890503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610aae576040517f4474429800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4284602001511015610aec576040517f398cfd0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82341015610b26576040517f8a0d377900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050610bbb89838561186b565b8073ffffffffffffffffffffffffffffffffffffffff166342842e0e8560400151338b6040518463ffffffff1660e01b8152600401610bfc93929190611efe565b600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b50505050878973ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de486604051610c8c9190611b41565b60405180910390a45050505050505060016000819055505050565b81816000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610db0576040517f665c1c5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000541415610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90611ede565b60405180910390fd5b60026000819055503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b8152600401610e4e9190611b41565b60206040518083038186803b158015610e6657600080fd5b505afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190611f4a565b73ffffffffffffffffffffffffffffffffffffffff1614610eeb576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050838573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec62315860405160405180910390a460016000819055505050505050565b610fe761141b565b600c821115611022576040517f973f732300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808381526020018273ffffffffffffffffffffffffffffffffffffffff16815250600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050565b6110ed61141b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561115d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115490611fe9565b60405180910390fd5b611166816117a5565b50565b82826000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111611272576040517f665c1c5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260005414156112b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112af90611ede565b60405180910390fd5b600260008190555083600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000154141561134d576040517f3d57fb8900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000181905550848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f88a14f938c07a2afe2cc96e2b04a435b661cecc772d130fcc8f8070bee3d3b54876040516114039190611b41565b60405180910390a46001600081905550505050505050565b611423611a11565b73ffffffffffffffffffffffffffffffffffffffff166114416106e1565b73ffffffffffffffffffffffffffffffffffffffff1614611497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148e90612055565b60405180910390fd5b565b4281116114d2576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821161150c576040517f2c669f0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016115619190611b41565b60206040518083038186803b15801561157957600080fd5b505afa15801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b19190611f4a565b73ffffffffffffffffffffffffffffffffffffffff16146115fe576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b8152600401611639929190612075565b60206040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168991906120d6565b6116bf576040517fc19f17a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052808481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600080600073ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16146119655782600001519150600254905061196f565b6000915060025490505b60006064858461197f9190612132565b61198991906121bb565b905060006064868461199b9190612132565b6119a591906121bb565b905060008183886119b691906121ec565b6119c091906121ec565b90506119d0866020015184611a19565b6119fc600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611a19565b611a068882611a19565b505050505050505050565b600033905090565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611a3f90612251565b60006040518083038185875af1925050503d8060008114611a7c576040519150601f19603f3d011682016040523d82523d6000602084013e611a81565b606091505b5050905080611abc576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60405180606001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000819050919050565b611b3b81611b28565b82525050565b6000602082019050611b566000830184611b32565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b8782611b5c565b9050919050565b611b9781611b7c565b82525050565b6000602082019050611bb26000830184611b8e565b92915050565b600080fd5b611bc681611b7c565b8114611bd157600080fd5b50565b600081359050611be381611bbd565b92915050565b600060208284031215611bff57611bfe611bb8565b5b6000611c0d84828501611bd4565b91505092915050565b611c1f81611b28565b8114611c2a57600080fd5b50565b600081359050611c3c81611c16565b92915050565b60008060008060808587031215611c5c57611c5b611bb8565b5b6000611c6a87828801611bd4565b9450506020611c7b87828801611c2d565b9350506040611c8c87828801611c2d565b9250506060611c9d87828801611c2d565b91505092959194509250565b60008060408385031215611cc057611cbf611bb8565b5b6000611cce85828601611bd4565b9250506020611cdf85828601611c2d565b9150509250929050565b611cf281611b28565b82525050565b611d0181611b7c565b82525050565b606082016000820151611d1d6000850182611ce9565b506020820151611d306020850182611ce9565b506040820151611d436040850182611cf8565b50505050565b6000606082019050611d5e6000830184611d07565b92915050565b604082016000820151611d7a6000850182611ce9565b506020820151611d8d6020850182611cf8565b50505050565b6000604082019050611da86000830184611d64565b92915050565b600060208284031215611dc457611dc3611bb8565b5b6000611dd284828501611c2d565b91505092915050565b600080600060608486031215611df457611df3611bb8565b5b6000611e0286828701611bd4565b9350506020611e1386828701611c2d565b9250506040611e2486828701611bd4565b9150509250925092565b600080600060608486031215611e4757611e46611bb8565b5b6000611e5586828701611bd4565b9350506020611e6686828701611c2d565b9250506040611e7786828701611c2d565b9150509250925092565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611ec8601f83611e81565b9150611ed382611e92565b602082019050919050565b60006020820190508181036000830152611ef781611ebb565b9050919050565b6000606082019050611f136000830186611b8e565b611f206020830185611b8e565b611f2d6040830184611b32565b949350505050565b600081519050611f4481611bbd565b92915050565b600060208284031215611f6057611f5f611bb8565b5b6000611f6e84828501611f35565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611fd3602683611e81565b9150611fde82611f77565b604082019050919050565b6000602082019050818103600083015261200281611fc6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061203f602083611e81565b915061204a82612009565b602082019050919050565b6000602082019050818103600083015261206e81612032565b9050919050565b600060408201905061208a6000830185611b8e565b6120976020830184611b8e565b9392505050565b60008115159050919050565b6120b38161209e565b81146120be57600080fd5b50565b6000815190506120d0816120aa565b92915050565b6000602082840312156120ec576120eb611bb8565b5b60006120fa848285016120c1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061213d82611b28565b915061214883611b28565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561218157612180612103565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121c682611b28565b91506121d183611b28565b9250826121e1576121e061218c565b5b828204905092915050565b60006121f782611b28565b915061220283611b28565b92508282101561221557612214612103565b5b828203905092915050565b600081905092915050565b50565b600061223b600083612220565b91506122468261222b565b600082019050919050565b600061225c8261222e565b915081905091905056fea264697066735822122085ae194a462f9dfe2818ebff81e021bdcbed79ecde0ed3cceee6b496dca0311764736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ItemListed(address,address,uint256,uint256)": {
        "notice": "================EVENTS================///"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "MarketplaceFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 341,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "MarketplaceFeeCollector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 366,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "listing",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ListingItem)354_storage))"
      },
      {
        "astId": 371,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_collection",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(CollectionOwnerFee)359_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ListingItem)354_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.ListingItem))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ListingItem)354_storage)"
      },
      "t_mapping(t_address,t_struct(CollectionOwnerFee)359_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftMarketplace.CollectionOwnerFee)",
        "numberOfBytes": "32",
        "value": "t_struct(CollectionOwnerFee)359_storage"
      },
      "t_mapping(t_uint256,t_struct(ListingItem)354_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.ListingItem)",
        "numberOfBytes": "32",
        "value": "t_struct(ListingItem)354_storage"
      },
      "t_struct(CollectionOwnerFee)359_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.CollectionOwnerFee",
        "members": [
          {
            "astId": 356,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "fee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 358,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "receipt",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ListingItem)354_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.ListingItem",
        "members": [
          {
            "astId": 349,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 351,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "expirationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 353,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}