{
  "language": "Solidity",
  "sources": {
    "contracts/NftMarketplace.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nerror NotOwner();\r\nerror NotListed();\r\nerror NotApproved();\r\nerror AboveMaximum();\r\nerror AlreadyListed();\r\nerror ListingExpired();\r\nerror YouOwnThisItem();\r\nerror TransferFailed();\r\nerror NotEnoughEther();\r\nerror LengthsNotEqual();\r\nerror PriceCannotBeZero();\r\nerror PriceCannotBeTheSame();\r\nerror InvalidExpirationTime();\r\n\r\ncontract NftMarketplace is ReentrancyGuard, Ownable {\r\n    uint256 public MarketplaceFee;\r\n    address public MarketplaceFeeCollector;\r\n\r\n    uint256 public constant MARKETPLACE_MAX_FEE = 5;\r\n    uint256 public constant COLLECTION_MAX_FEE = 12;\r\n\r\n    struct ListingItem {\r\n        uint256 price;\r\n        uint256 expirationTime;\r\n        address seller;\r\n    }\r\n\r\n    struct CollectionOwnerFee {\r\n        uint256 fee;\r\n        address receipt;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => ListingItem)) private listing;\r\n    mapping(address => CollectionOwnerFee) private _collection;\r\n\r\n    modifier notListed(address nftAddress, uint256 tokenId) {\r\n        ListingItem memory _listing = listing[nftAddress][tokenId];\r\n        if (_listing.price > 0) revert AlreadyListed();\r\n        _;\r\n    }\r\n\r\n    modifier isListed(address nftAddress, uint256 tokenId) {\r\n        ListingItem memory _listing = listing[nftAddress][tokenId];\r\n        if (_listing.price <= 0) revert NotListed();\r\n        _;\r\n    }\r\n\r\n    function _createListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _expirationTime\r\n    ) private {\r\n        if (_expirationTime <= block.timestamp) revert InvalidExpirationTime();\r\n        if (_price <= 0) revert PriceCannotBeZero();\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        if (nft.ownerOf(_tokenId) != msg.sender) revert NotOwner();\r\n        if (!nft.isApprovedForAll(msg.sender, address(this)))\r\n            revert NotApproved();\r\n        listing[_nftAddress][_tokenId] = ListingItem({\r\n            price: _price,\r\n            expirationTime: _expirationTime,\r\n            seller: msg.sender\r\n        });\r\n     \r\n    }\r\n\r\n    function createListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _expirationTime\r\n    ) public notListed(_nftAddress, _tokenId) nonReentrant {\r\n        _createListing(_nftAddress, _tokenId, _price, _expirationTime);\r\n        emit ItemListed(msg.sender, _nftAddress, _tokenId, _price);\r\n    }\r\n\r\n    function updateListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 newPrice\r\n    ) external isListed(_nftAddress, _tokenId) nonReentrant {\r\n        if (listing[_nftAddress][_tokenId].price == newPrice)\r\n            revert PriceCannotBeTheSame();\r\n        listing[_nftAddress][_tokenId].price = newPrice;\r\n        emit UpdateListing(msg.sender, _nftAddress, _tokenId, newPrice);\r\n    }\r\n\r\n    function cancelListing(address _nftAddress, uint256 _tokenId)\r\n        external\r\n        isListed(_nftAddress, _tokenId)\r\n        nonReentrant\r\n    {\r\n        if (IERC721(_nftAddress).ownerOf(_tokenId) != msg.sender)\r\n            revert NotOwner();\r\n        delete listing[_nftAddress][_tokenId];\r\n        emit ItemCanceled(msg.sender, _nftAddress, _tokenId);\r\n    }\r\n\r\n    function buyItem(address nftAddress, uint256 tokenId)\r\n        public\r\n        payable\r\n        nonReentrant\r\n        isListed(nftAddress, tokenId)\r\n    {\r\n        ListingItem memory _listing = listing[nftAddress][tokenId];\r\n        uint256 _price = _listing.price;\r\n        address _seller = _listing.seller;\r\n        IERC721 nft = IERC721(nftAddress);\r\n        if (_seller == msg.sender) revert YouOwnThisItem();\r\n        if (_listing.expirationTime < block.timestamp) revert ListingExpired();\r\n        if (msg.value < _price) revert NotEnoughEther();\r\n        delete listing[nftAddress][tokenId];\r\n        _makePayment(nftAddress, _seller, _price);\r\n        nft.safeTransferFrom(_listing.seller, msg.sender, tokenId);\r\n        emit ItemListed(_seller, nftAddress, tokenId, _price);\r\n       \r\n    }\r\n\r\n    function _makePayment(\r\n        address nftAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        CollectionOwnerFee memory collection = _collection[nftAddress];\r\n        uint256 collectionFee;\r\n        uint256 _marketplaceFee;\r\n        if (collection.receipt != address(0)) {\r\n            collectionFee = collection.fee;\r\n            _marketplaceFee = MarketplaceFee;\r\n        } else {\r\n            collectionFee = 0;\r\n            _marketplaceFee = MarketplaceFee;\r\n        }\r\n\r\n        uint256 _collectionFee = (collectionFee * amount) / 100;\r\n        uint256 mFee = (_marketplaceFee * amount) / 100;\r\n        uint256 sellersEth = amount - _collectionFee - mFee;\r\n        _transferPayment(collection.receipt, _collectionFee);\r\n        _transferPayment(MarketplaceFeeCollector, mFee);\r\n        _transferPayment(to, sellersEth);\r\n    }\r\n\r\n    function _transferPayment(address to, uint256 amount) internal {\r\n        (bool success, ) = payable(to).call{value: amount}(\"\");\r\n        if (!success) revert TransferFailed();\r\n    }\r\n\r\n    function setCollectionDetails(\r\n        address nftAddress,\r\n        uint256 _fee,\r\n        address _receipt\r\n    ) external onlyOwner {\r\n        if (_fee > COLLECTION_MAX_FEE) revert AboveMaximum();\r\n        _collection[nftAddress] = CollectionOwnerFee({\r\n            fee: _fee,\r\n            receipt: _receipt\r\n        });\r\n    }\r\n\r\n    function setMarketplaceFee(uint256 _marketplacefee) external onlyOwner {\r\n        if (_marketplacefee > MARKETPLACE_MAX_FEE) revert AboveMaximum();\r\n        MarketplaceFee = _marketplacefee;\r\n    }\r\n\r\n    function setMarketplaceFeeCollector(address account) external onlyOwner {\r\n        MarketplaceFeeCollector = account;\r\n    }\r\n\r\n    function getCollectionInfo(address nftAddress)\r\n        external\r\n        view\r\n        returns (CollectionOwnerFee memory)\r\n    {\r\n        return _collection[nftAddress];\r\n    }\r\n\r\n    function getCollectionTokenInfo(address nftAddress, uint256 tokenId)\r\n        external\r\n        view\r\n        returns (ListingItem memory)\r\n    {\r\n        return listing[nftAddress][tokenId];\r\n    }\r\n\r\n    ///================EVENTS================///\r\n    event ItemListed(\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event UpdateListing(\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event ItemBought(\r\n        address indexed buyer,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 price\r\n    );\r\n    event ItemCanceled(\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId\r\n    );\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}